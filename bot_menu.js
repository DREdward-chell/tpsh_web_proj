const {Markup} = require("telegraf");

function button(text, callback) {
    return Markup.button.callback(text, callback);
}
function webButton(text, url) {
    return Markup.button.webApp(text, url)
}

function initBotMenu(bot) {
    let menuButtons = [
        [button("üé≠ –°–æ–±—ã—Ç–∏—è", "events"), button("üéûÔ∏è –ö–∏–Ω–æ", "cinema")],
        [webButton("‚òÅÔ∏è –ü–æ–≥–æ–¥–∞", "https://tg-bot-web-app-pps.vercel.app/weather"), webButton("üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏", "https://tg-bot-web-app-pps.vercel.app/news")],
        [button("üè† –ú–æ–π –¥–æ–º", "home"), button("üíõ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "developing")]
    ];

    bot.command("menu", async (ctx) => {
        const keyboard = Markup.inlineKeyboard(menuButtons);
        await ctx.reply("–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", {
            reply_markup: {inline_keyboard: menuButtons},
            parse_mode: 'HTML'
        });
    });
    bot.action("back", async (ctx) => {
        const keyboard = Markup.inlineKeyboard(menuButtons);
        await ctx.editMessageText("–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", keyboard, 'HTML');
    });

    bot.action("events", async (ctx) => {
        let buttons = [
            [webButton("üé≠ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", "https://tg-bot-web-app-pps.vercel.app/events")],
            [button("üéØ –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã", "eventFilters")],
            [button("‚¨Ö –ù–∞–∑–∞–¥", "back")],
        ];
        const keyboard = Markup.inlineKeyboard(buttons);
        ctx.editMessageText("üé≠ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", keyboard);
    })

    bot.action("cinema", async (ctx) => {
        let buttons = [
            [webButton("üéûÔ∏è –°–µ–∞–Ω—Å—ã", "https://tg-bot-web-app-pps.vercel.app/movie")],
            [button("üéØ –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã", "cinemaFilters")],
            [button("‚¨Ö –ù–∞–∑–∞–¥", "back")],
        ];
        const keyboard = Markup.inlineKeyboard(buttons);
        ctx.editMessageText("üéûÔ∏è –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", keyboard);
    })

    bot.action("news", async (ctx) => {
        let buttons = [
            [button("üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞", "vladNews"), button("üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –°—Ç—Ä–∞–Ω—ã", "rusNews")],
            [button("üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –ú–∏—Ä–∞", "allNews")],
            [button("‚¨Ö –ù–∞–∑–∞–¥", "back")]
        ]
        const keyboard = Markup.inlineKeyboard(buttons);
        ctx.editMessageText("üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏", keyboard)
    })

    bot.action("home", async (ctx) => {
        let buttons = [
            [button("üè† –ü—Ä–æ–±–ª–µ–º—ã", "developing"), button("üè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "developing")],
            [button("‚¨Ö –ù–∞–∑–∞–¥", "back")]
        ]
        const keyboard = Markup.inlineKeyboard(buttons);
        ctx.editMessageText("üè† –ú–æ–π –¥–æ–º", keyboard)
    })

    bot.action("developing", async (ctx) => {
        ctx.reply("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    })
}

module.exports = initBotMenu